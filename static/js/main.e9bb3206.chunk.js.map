{"version":3,"sources":["component/button.js","component/bubbleSorting.js","component/insertionSorting.js","component/selectionSorting.js","component/mergeSorting.js","component/SortingVisualizer1.js","App.js","serviceWorker.js","index.js"],"names":["button","props","className","onClick","value","e1","e2","e3","e4","e5","e6","e7","bubbleSorting","array","length","auxilaryArray","newAnimation","i","j","animation","Compare","temp","Swap","push","insertionSorting","sortingAnimation","selectionSorting","size","index","auxAnimation","innerCompare","k","console","log","mergeSorting","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","SortingVisualizer1","setValue","e","setState","target","generateArray","newArray","state","randomNumber","bubbleSort","arrayBars","document","getElementsByClassName","compFirst","compSecond","swapFirst","swapSecond","barOneSwap","style","barTwoSwap","setTimeout","barOnestyle","barTwostyle","backgroundColor","height","insertionSort","compareFirst","compareSecond","newheight","selectionSort","mergeSort","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","min","max","random","this","type","onChange","quickSort","heapSort","map","idx","key","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9bb3206.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SortingVisualizer.css'\r\n\r\nfunction button( props ) {\r\n    return (\r\n        <div>\r\n            <button className=\"button-animation\" onClick={props.value.e1}>\r\n                Generate new Array</button>\r\n            <button className=\"button-animation\" onClick={props.value.e2}>\r\n                Bubble Sort</button>\r\n            <button className=\"button-animation\" onClick={props.value.e3}>\r\n                Insertion Sort</button>\r\n            <button className=\"button-animation\" onClick={props.value.e4}>\r\n                Selection Sort</button>\r\n            <button className=\"button-animation\" onClick={props.value.e5}>\r\n                Quick Sort</button>\r\n            <button className=\"button-animation\" onClick={props.value.e6}>\r\n                Heap Sort</button>\r\n            <button className=\"button-animation\" onClick={props.value.e7}>\r\n                Merge Sort</button>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default button\r\n","\r\n function bubbleSorting(array) {\r\n\r\n    if( array.length === 1 )\r\n        return array;\r\n    const length = array.length;\r\n\r\n    const auxilaryArray = array;\r\n    const newAnimation = [];\r\n\r\n    for( var i=0; i<length ; i++ )\r\n    {\r\n        for( var j=0 ; j<length-i-1 ; j++)\r\n        {\r\n            const animation = {};\r\n            animation.Compare = [j,j+1]\r\n            if( auxilaryArray[j] > auxilaryArray[j+1])\r\n            {\r\n                var temp = auxilaryArray[j];\r\n                auxilaryArray[j] = auxilaryArray[j+1];\r\n                auxilaryArray[j+1] = temp;\r\n                animation.Swap = [j,j+1]\r\n            }\r\n            else\r\n                animation.Swap = [j,j];\r\n            \r\n            newAnimation.push(animation);\r\n        }\r\n    }\r\n\r\n    return newAnimation;\r\n}\r\n\r\nexport default bubbleSorting\r\n","\r\nfunction insertionSorting( array ) {\r\n\r\n    const sortingAnimation = [];\r\n    var i = 1;\r\n    while( i < array.length ){\r\n        var temp = array[i];\r\n        var j = i-1;\r\n        \r\n        while( j >= 0 )\r\n        {\r\n            const animation = {}\r\n            animation.Compare = [j,j+1]\r\n            if( array[j] > temp )\r\n            {\r\n                animation.Swap = [j,j+1];\r\n                array[j+1] = array[j];\r\n                j = j-1;\r\n            }\r\n            else\r\n            {\r\n                animation.Swap = [j,j];\r\n                sortingAnimation.push(animation);\r\n                break;\r\n            }\r\n        sortingAnimation.push(animation);\r\n        }\r\n        i++;\r\n        array[j+1] = temp;\r\n        \r\n    }\r\n\r\n    return sortingAnimation;\r\n}\r\n\r\nexport default insertionSorting\r\n","\r\nfunction selectionSorting ( array ) {\r\n\r\n    const animation = [];\r\n\r\n    var size = array.length;\r\n    for( var i=0 ; i<size-1 ; i++ )\r\n    {\r\n        var index = i;\r\n\r\n        const auxAnimation = {};\r\n        auxAnimation.Compare = [];\r\n\r\n        for( var j=i+1 ; j<size ; j++ )\r\n        {\r\n            const temp = {}\r\n            temp.innerCompare = [j,index];\r\n            if( array[j] < array[index] )\r\n                index = j;\r\n\r\n            auxAnimation.Compare.push(temp);\r\n        }\r\n        auxAnimation.Swap = [i,index];\r\n        animation.push(auxAnimation);\r\n        \r\n        var k = array[i];\r\n        array[i] = array[index];\r\n        array[index] = k;\r\n       \r\n    }\r\n\r\n    console.log(animation);\r\n    return animation;\r\n}\r\n\r\nexport default selectionSorting\r\n","\r\nfunction mergeSorting(array) {\r\n\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\r\n  console.log(animations);\r\n  return animations;\r\n\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport default mergeSorting","import React, { Component } from 'react'\r\nimport './SortingVisualizer.css'\r\nimport Button from './button'\r\nimport bubbleSorting from './bubbleSorting'\r\nimport insertionSorting from './insertionSorting'\r\nimport selectionSorting from './selectionSorting'\r\n//import quickSorting from './quickSorting'\r\nimport mergeSorting from './mergeSorting'\r\nconst SPEED = 100;\r\n\r\nconst PRIMARY_COLOR = 'aqua';\r\n\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst SWAP_COLOR = \"green\";\r\n\r\nclass SortingVisualizer1 extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value : 10,\r\n            array : []\r\n        }\r\n    }\r\n\r\n    setValue = e => {\r\n        this.setState({\r\n            value : e.target.value\r\n        })\r\n    }\r\n    randomNumber(min,max) {\r\n        return (Math.floor(Math.random()*(max-min)+1))\r\n    }\r\n\r\n    generateArray = () => {\r\n        const newArray = [];\r\n        for( var i=0 ; i< this.state.value ; i++)\r\n            newArray.push(this.randomNumber(10,500));\r\n        \r\n        console.log(newArray);\r\n        this.setState({array : newArray})\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.generateArray();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    /* -------------------------------------BUBBLE SORT ANIMATION--------------------------------- */ \r\n    bubbleSort = () => {\r\n\r\n        const newArray = bubbleSorting(this.state.array);\r\n        const length = newArray.length;\r\n        \r\n        for( var i=0 ; i<length ; i++)\r\n        {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n            const [compFirst , compSecond ] = newArray[i].Compare;\r\n            const [swapFirst , swapSecond] = newArray[i].Swap;\r\n            const barOneSwap = arrayBars[swapFirst].style\r\n            const barTwoSwap = arrayBars[swapSecond].style;\r\n\r\n            setTimeout( () => {\r\n            const barOnestyle = arrayBars[compFirst].style\r\n            const barTwostyle = arrayBars[compSecond].style\r\n\r\n            barOnestyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwostyle.backgroundColor = SECONDARY_COLOR;\r\n            if( compFirst !== compSecond)\r\n            {\r\n                barOnestyle.backgroundColor = SECONDARY_COLOR;\r\n                barTwostyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n                setTimeout( () => {\r\n                    \r\n                    var temp = barOneSwap.height;\r\n                    barOneSwap.height = `${barTwoSwap.height}`;\r\n                    barTwoSwap.height = `${temp}`;\r\n\r\n                    barOnestyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwostyle.backgroundColor = PRIMARY_COLOR;\r\n                }, 90)\r\n            }  \r\n        }, (i)*SPEED+10);\r\n\r\n            const barOnestyle = arrayBars[compFirst].style\r\n            const barTwostyle = arrayBars[compSecond].style\r\n\r\n            barOnestyle.backgroundColor = PRIMARY_COLOR;\r\n            barTwostyle.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n    /*--------------------------INSERTION SORT ANIMATION----------------------------- */\r\n    \r\n    insertionSort = () => {\r\n\r\n    const newArray = insertionSorting(this.state.array);\r\n\r\n    for( var i=0 ; i<newArray.length ; i++ ){\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n        const [compareFirst , compareSecond] = newArray[i].Compare;\r\n        const [swapFirst , swapSecond] = newArray[i].Swap;\r\n\r\n        const barOnestyle = arrayBars[compareFirst].style;\r\n        const barTwostyle = arrayBars[compareSecond].style;\r\n        setTimeout( ()=> {\r\n\r\n            barOnestyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwostyle.backgroundColor = SECONDARY_COLOR ;\r\n\r\n            if( compareFirst !== compareSecond )\r\n            {\r\n                setTimeout( ()=>{\r\n                    const barOneSwap = arrayBars[swapFirst].style;\r\n                    const barTwoSwap = arrayBars[swapSecond].style;\r\n        \r\n                    barOnestyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwostyle.backgroundColor = SECONDARY_COLOR ;\r\n\r\n                    let newheight = barOneSwap.height;\r\n                    barOneSwap.height = `${barTwoSwap.height}`;\r\n                    barTwoSwap.height = `${newheight}`; \r\n\r\n                    barOnestyle.backgroundColor = SWAP_COLOR;\r\n                    barTwostyle.backgroundColor = SWAP_COLOR ;\r\n\r\n                },90 );\r\n            }\r\n\r\n        },(i)*SPEED+10)\r\n\r\n     }\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //----------------------------SELECTION SORT----------------------------------------------\r\n    selectionSort = () => {\r\n        const newArray = selectionSorting(this.state.array);\r\n\r\n        for( var i=0 ; i<newArray.length ; i++ )\r\n        {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n            const[ swapFirst, swapSecond ] = newArray[i].Swap;\r\n\r\n            const barOneSwap = arrayBars[swapFirst].style;\r\n            const barTwoSwap = arrayBars[swapSecond].style;\r\n            //var k = newArray[i].Compare.length;\r\n            // for( var j=0 ; j < k ; j++ )\r\n            // {\r\n            //     const[ innerCompare1, innerCompare2 ] = newArray[i].Compare[j].innerCompare;\r\n            //     const barOnestyle = arrayBars[innerCompare1].style;\r\n            //     const barTwostyle = arrayBars[innerCompare2].style;\r\n\r\n            //         // setTimeout( ()=>{\r\n\r\n            //         //     barOnestyle.backgroundColor = SECONDARY_COLOR;\r\n            //         //     barTwostyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n            //         // },j*900)\r\n            // }\r\n\r\n            setTimeout( () => {\r\n\r\n                barOneSwap.backgroundColor = SECONDARY_COLOR;\r\n                barTwoSwap.backgroundColor = SECONDARY_COLOR;\r\n\r\n                let newheight = barOneSwap.height;\r\n                barOneSwap.height = `${barTwoSwap.height}`;\r\n                barTwoSwap.height = `${newheight}`; \r\n            }, i*SPEED+900)\r\n\r\n            setTimeout( ()=>{\r\n                barOneSwap.backgroundColor = PRIMARY_COLOR;\r\n                barTwoSwap.backgroundColor = PRIMARY_COLOR;\r\n            },i*SPEED+1000)\r\n            \r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //------------------------------------MERGE SORT----------------------------------------------------//\r\n\r\n    mergeSort = () => {\r\n\r\n        const animations = mergeSorting(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n           \r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * SPEED);\r\n          } \r\n          else {\r\n          \r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * SPEED);\r\n          }\r\n        }\r\n      }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"button-box\">\r\n                    <div className=\"input-box\">\r\n                        <label> No of Input Data : </label>\r\n                        <input type=\"text\" \r\n                            value={this.state.value} \r\n                            onChange={ e => this.setValue(e)} \r\n                            className=\"input-text\"/>\r\n                    </div>\r\n                    \r\n                    <Button value={{\r\n                        e1: this.generateArray,\r\n                        e2: this.bubbleSort,\r\n                        e3: this.insertionSort,\r\n                        e4: this.selectionSort,\r\n                        e5: this.quickSort,\r\n                        e6: this.heapSort,\r\n                        e7: this.mergeSort,\r\n                    }}\r\n                    />\r\n                </div>\r\n                {/* <button onClick={this.testArray}>Test Array</button> */}\r\n                <div className=\"array-box\">\r\n                    { this.state.array.map( (value,idx) => \r\n                        <div key={idx} style={{height: `${value}px` ,  \r\n                            width:`${900/(this.state.array.length)}px`}} \r\n                            className=\"array-bar\" >\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer1\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SortingVisualizer1 from './component/SortingVisualizer1'\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"App\" >\r\n      {/* <SortingVisualizer1 /> */}\r\n      <SortingVisualizer1  />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}